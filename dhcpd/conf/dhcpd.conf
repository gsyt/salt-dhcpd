{%- from "dhcpd/map.jinja" import dhcpd with context -%}

{%- set config = {
  'manage': salt['pillar.get']('dhcpd:config:manage', False), 
  'options': salt['pillar.get']('dhcpd:config:options', []), 
  'file': dhcpd.config,
  'contents': salt['pillar.get']('dhcpd:config:contents', ''),
  'source': salt['pillar.get']('dhcpd:config:source', 'salt://dhcpd/conf/dhcpd.conf'),
  'networks': salt['pillar.get']('dhcpd:config:networks', []),
  'zones': salt['pillar.get']('dhcpd:config:zones', []),
  'cryptokeys': salt['pillar.get']('dhcpd:config:keys', []),
  'hosts': salt['pillar.get']('dhcpd:config:hosts', []),
} -%}

{%- set omapi = {
  'port': salt['pillar.get']('dhcpd:config:omapi:port', '7991'),
  'key': salt['pillar.get']('dhcpd:config:omapi:key', ''),
} -%}

{%- if config.options -%}
  {%- for option in config.options -%}
{{ option }};
{% endfor -%}
{%- endif %}

{%- if config.cryptokeys -%}
  {%- for cryptokey in config.cryptokeys -%}
    {%- set keydata = {
      'secret': salt['pillar.get']('dhcpd:config:keys:' ~ cryptokey ~ ':secret', ''),
      'algorithm': salt['pillar.get']('dhcpd:config:keys:' ~ cryptokey ~ ':algorithm', 'hmac-md5'),
    } -%}
# {{ cryptokey }}
key {{ cryptokey }} {
  algorithm {{ keydata.algorithm }};
  secret {{ keydata.secret }};
}
{% endfor -%}
{%- endif %}

{% if omapi.key -%}
omapi-port {{ omapi.port }};
omapi-key {{ omapi.key }};
{%- endif %}

{%- if config.networks -%}
  {%- for net in config.networks -%}
    {%- set netdata = {
      'address': salt['pillar.get']('dhcpd:config:networks:' ~ net ~ ':address', ''),
      'netmask': salt['pillar.get']('dhcpd:config:networks:' ~ net ~ ':netmask', ''),
      'options': salt['pillar.get']('dhcpd:config:networks:' ~ net ~ ':options', []),
    } %}
# {{ net }}
subnet {{ netdata.address }} netmask {{ netdata.netmask }} {
    {%- for option in netdata.options %}
    {{ option }};
    {%- endfor %}
}
{% endfor -%}
{%- endif %}

{%- if config.zones -%}
  {%- for zone in config.zones -%}
    {%- set zonedata = {
      'primary': salt['pillar.get']('dhcpd:config:zones:' ~ zone ~ ':primary', ''),
      'key': salt['pillar.get']('dhcpd:config:zones:' ~ zone ~ ':key', ''),
    } -%}
# {{ zone }}
zone {{ zone }} {
    primary {{ zonedata.primary }};
    key {{ zonedata.key }};
}
{% endfor -%}
{%- endif %}

{%- if config.hosts -%}
  {%- for host in config.hosts %}
    {%- set hostdata = {
      'options': salt['pillar.get']('dhcpd:config:hosts:' ~ host, []),
    } -%}
    {%- if hostdata.options -%}
host {{ host }} {
      {%- for option in hostdata.options %}
  {{option}};
      {%- endfor %}
}
{% endif -%}
{% endfor -%}
{%- endif %}
